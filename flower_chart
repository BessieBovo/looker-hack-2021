/**
 * Welcome to the Looker Visualization Builder! Please refer to the following resources
 * to help you write your visualization:
 *  - API Documentation - https://github.com/looker/custom_visualizations_v2/blob/master/docs/api_reference.md
 *  - Example Visualizations - https://github.com/looker/custom_visualizations_v2/tree/master/src/examples
 **/

const visObject = {
 /**
  * Configuration options for your visualization. In Looker, these show up in the vis editor
  * panel but here, you can just manually set your default values in the code.
  **/
  options: {
    first_option: {
    type: "string",
      label: "My First Option",
      default: "Default Value"
    },
    second_option: {
    type: "number",
      label: "My Second Option",
      default: 42
    }
  },
 
 /**
  * The create function gets called when the visualization is mounted but before any
  * data is passed to it.
  **/
create: function(element, config){
element.innerHTML = "<h1>Ready to render!</h1>";
},

 /**
  * UpdateAsync is the function that gets called (potentially) multiple times. It receives
  * the data and should update the visualization with the new data.
  **/
updateAsync: function(data, element, config, queryResponse, details, doneRendering){
    // set the dimensions and margins of the graph
    var margin = {top: 20, right: 20, bottom: 30, left: 40},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    // set the ranges
    var x = d3.scaleBand()
              .range([0, width])
              .padding(0.1);
    var y = d3.scaleLinear()
              .range([height, 0]);

    // append the svg object to the body of the page
    // append a 'group' element to 'svg'
    // moves the 'group' element to the top left margin
    element.innerHTML = ""
    var svg = d3.select("#vis").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");
   
    formattedData = []

    // format the data
    data.forEach(function(d) {
      formattedData.push({
      count: d["game.count"]["value"],
        friendly_class: d["game.friendly_class"]["value"],
        opponent_class: d["game.opponent_class"]["value"]
      });
    });

    // Scale the range of the data in the domains
    x.domain(formattedData.map(function(d) { return d.friendly_class; }));
    y.domain([600, d3.max(formattedData, function(d) { return d.count; })+5]);

    // append the rectangles for the bar chart
    svg.selectAll(".bar").data(formattedData)
      .enter().append("rect")
      .attr("class", "bar")
      .attr("style", "fill: #3D550C")
      .attr("x", function(d) { return x(d.friendly_class)+40; })
      .attr("width", x.bandwidth()/10)
      .attr("y", function(d) { return y(d.count); })
      .attr("height", function(d) { return height - y(d.count); });
   
       //get the mav value for each bar
       var formattedDataMax = d3.nest()
      .key(function(d) { return d.friendly_class; })
      .rollup(function(v) { return {
        value: d3.max(v, function(d) { return d.count; })
      }; })
      .entries(formattedData);
    //console.log(JSON.stringify(formattedDataMax));
   
    //append the petals to the top of the bars
     svg.selectAll(".data-circle").data(formattedDataMax)
      .enter().append("circle")
        .attr("fill", "#AE388B")
        .attr("stroke", "none")
        .attr("cx", function(d) { return x(d.key) + 32.5; })
        .attr("cy", function(d) { return y(d.value.value)-10; })
        .attr("r", 15);
 
      //append the petals to the top of the bars
      svg.selectAll(".data-circle").data(formattedDataMax)
      .enter().append("circle")
        .attr("fill", "#AE388B")
        .attr("stroke", "none")
        .attr("cx", function(d) { return x(d.key) + 57.5; })
        .attr("cy", function(d) { return y(d.value.value)-10; })
        .attr("r", 15);
 
      //append the petals to the top of the bars
      svg.selectAll(".data-circle").data(formattedDataMax)
      .enter().append("circle")
        .attr("fill", "#E983D8")
        .attr("stroke", "none")
        .attr("cx", function(d) { return x(d.key) + 32.5; })
        .attr("cy", function(d) { return y(d.value.value)+5; })
        .attr("r", 15);
 
      //append the petals to the top of the bars
      svg.selectAll(".data-circle").data(formattedDataMax)
      .enter().append("circle")
        .attr("fill", "#E983D8")
        .attr("stroke", "none")
        .attr("cx", function(d) { return x(d.key) + 57.5; })
        .attr("cy", function(d) { return y(d.value.value)+5; })
        .attr("r", 15);
 
      //append the petals to the top of the bars
      svg.selectAll(".data-circle").data(formattedDataMax)
      .enter().append("ellipse")
        .attr("fill", "#FFC0CB")
        .attr("stroke", "none")
        .attr("cx", function(d) { return x(d.key) + 45; })
        .attr("cy", function(d) { return y(d.value.value)-12.5; })
        .attr("rx", 15)
  			.attr("ry", 20);
 
     //append the circle to the top of the bars
    svg.selectAll(".data-circle").data(formattedDataMax)
      .enter().append("circle")
        .attr("fill", "#870A30")
        .attr("stroke", "#E983D8")
        .attr("cx", function(d) { return x(d.key) + 45; })
        .attr("cy", function(d) { return y(d.value.value); })
        .attr("r", 10);



    // add the x Axis
    svg.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x));

    // add the y Axis
    svg.append("g")
      .call(d3.axisLeft(y));

doneRendering()
}
};

looker.plugins.visualizations.add(visObject);
